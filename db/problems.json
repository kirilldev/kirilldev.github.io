{
  "problems": [
    {
      "id": 1,
      "title": "Move Zeroes In Array",
      "description": "Given an array of numbers, write a function to move all <mark>0</mark>'s to the end of it while maintaining the relative order of the non-zero elements. For example, given <mark>nums = [0, 1, 0, 3, 12]</mark>, after calling your function, <mark>nums</mark> should be <mark>[1, 3, 12, 0, 0]</mark>. Do it in-place. Minimize the total number of operations.",
      "tags": [
        "arrays",
        "linear-time",
        "constant-memory",
        "two-pointers"
      ],
      "solutions": [
        "move-zeroes.js"
      ]
    },
    {
      "id": 2,
      "title": "Reverse Array Order",
      "description": "Given an array of numbers, write a function to reverse an order of elements in it. For example, given <mark>nums = [1, 2, 3, 4, 5]</mark>, after calling your function, <mark>nums</mark> should be <mark>[5, 4, 3, 2, 1]</mark>. Do it in-place.",
      "tags": [
        "arrays",
        "linear-time",
        "constant-memory",
        "two-pointers"
      ],
      "solutions": [
        "reverse-array-order.js"
      ]
    },
    {
      "id": 3,
      "title": "Reverse Word Order",
      "description": "Do it in place.",
      "tags": [
        "arrays",
        "linear-time",
        "constant-memory",
        "two-pointers"
      ],
      "solutions": [
        "reverse-word-order.js"
      ]
    },
    {
      "id": 4,
      "title": "Implement Quicksort",
      "description": "Given array of nums, sort it using quicksort. For example, given <mark>nums = [1,-10, 4, 3]</mark> after calling your function <mark>nums</mark> should be <mark>[-10, 1, 3, 4]</mark>.",
      "tags": [
        "arrays",
        "n-log-n-time",
        "constant-memory",
        "two-pointers",
        "recursive"
      ],
      "solutions": [
        "implement-quicksort.js"
      ]
    },
    {
      "id": 5,
      "title": "Implement Merge Sort",
      "description": "Given array of nums, sort it using merge sort. For example, given <mark>nums = [1,-10, 4, 3]</mark> after calling your function <mark>nums</mark> should be <mark>[-10, 1, 3, 4]</mark>.",
      "tags": [
        "arrays",
        "n-log-n-time",
        "two-pointers",
        "recursive"
      ],
      "solutions": [
        "implement-quicksort.js"
      ]
    },
    {
      "id": 6,
      "title": "Find Missing Number In a Sorted Array",
      "description": "Given an array. For example, given <mark>nums = [1, 2, 3, 5]</mark>",
      "tags": [
        "arrays",
        "logarithmic-time",
        "constant-memory",
        "two-pointers"
      ],
      "solutions": [
        "find-absent-number-in-range.js"
      ]
    },
    {
      "id": 7,
      "title": "Find Sum of all left leaves in a Binary Tree",
      "description": "Given a binary tree, find sum of all left leaves in it. For example, sum of all left leaves of the tree on the <a href=\"src/img/bst.svg\">image</a> is 5 + 23 = 27.",
      "tags": [
        "tree",
        "linear-time",
        "recursive"
      ],
      "solutions": [
        "find-sum-of-left-tree-leaves.js"
      ]
    },
    {
      "id": 8,
      "title": "Find Sum of All Nodes at given depth of a Binary Tree",
      "description": "Given a binary tree, find sum of all nodes at the given depth. For example, sum of nodes at the <mark>depth = 2</mark> of the tree on the <a href=\"src/img/bst.svg\">image</a> is <mark>18 + 31 = 49</mark>.",
      "tags": [
        "tree"
      ],
      "solutions": [
        "find-sum-of-nodes-at-depth.js"
      ]
    },
    {
      "id": 9,
      "title": "Check If two Binary Tree are Identical",
      "description": "Given heads oof two Binary Trees, check if trees are identical. Two trees are identical when they have same data and arrangement of data is also same.",
      "tags": [
        "tree"
      ],
      "solutions": [
        "is-trees-are-identical.js"
      ]
    },
    {
      "id": 10,
      "title": "Find Longest Increasing Subsequence in Array",
      "description": "Given an array of numbers, find the longest increasing sub-subsequence in which all elements will be in the sorted order. For example, given [3, 4, -1, 0, 6, 2, 3] the longest increasing subsequence will be [-1, 0, 2, 3]",
      "tags": [
        "arrays"
      ],
      "solutions": [
        "find-longest-increasing-subsequence-in-array.js"
      ]
    },
    {
      "id": 11,
      "title": "Find All Possible Combinations",
      "description": "Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.",
      "tags": [
        "arrays"
      ],
      "solutions": [
        "find-all-possible-combinations.js"
      ]
    },
    {
      "id": 12,
      "title": "Convert Sorted Array to Binary Search Tree",
      "description": "Given an array where elements are sorted in ascending order, convert it to a height balanced BST.",
      "tags": [
        "arrays",
        "tree"
      ],
      "solutions": [
        "create-bst-from-sorted-array.js"
      ]
    },
    {
      "id": 13,
      "title": "Find Majority Character in a String",
      "description": "Given the string, find majority character. A majority character in a string of size n is an character that appears more than n/2 times.",
      "tags": [
        "arrays",
        "search",
        "linear-time"
      ],
      "solutions": [
        "find-majority-character.js"
      ]
    },
    {
      "id": 14,
      "title": "Minimum Size Subarray Sum",
      "description": "Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.For example, given the array <mark>[2,3,1,2,4,3]</mark> and s = 7,the subarray <mark>[4,3]</mark> has the minimal length under the problem constraint.",
      "tags": [
        "arrays",
        "two-pointers",
        "linear-time"
      ],
      "solutions": [
        "minimum-size-contigious-subarray.js"
      ]
    },
    {
      "id": 15,
      "title": "Mythical Hydra Button",
      "description": "Create a button that is destroyed by clicking it, but two new buttons are created in it's place.",
      "tags": [
        "frontend"
      ],
      "solutions": [
        "mythical-hudra.js"
      ]
    },
    {
      "id": 16,
      "title": "Count 1’s in a sorted binary array",
      "tags": [
        "logarithmic-time",
        "search",
        "arrays"
      ],
      "description": "Given a binary array sorted in decreasing order, count the number of 1’s in it. For example, for input <mark>[1, 1, 0, 0, 0]</mark>, result will be <mark>2</mark>.",
      "solutions": [
        "count-ones-in-sorted-binary-array.js"
      ]
    },
    {
      "id": 17,
      "title": "Next larger number in array",
      "tags": [
        "arrays"
      ],
      "description": "Given an array which have distinct elements, the task is to find the next greater element for each element of the array in order of their appearance in the array. If no such element exists, output -1",
      "solutions": []
    },
    {
      "id": 18,
      "title": "Add Two Linked List Numbers (Reversed)",
      "tags": [
        "linear-time",
        "linked-list"
      ],
      "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
      "solutions": [
        "sum-numbers-linked-list-reverse.js"
      ]
    },
    {
      "id": 19,
      "title": "Add Two Linked List Numbers",
      "tags": [
        "linear-time",
        "linked-list"
      ],
      "description": "You are given two non-empty linked lists representing two non-negative integers. Each node contains a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
      "solutions": [
        "sum-numbers-linked-list.js"
      ]
    },
    {
      "id": 20,
      "title": "Is Linked List Palindrome",
      "tags": [
        "linear-time",
        "linked-list"
      ],
      "description": "Given a singly linked list, determine if it is a palindrome.",
      "solutions": [
        "linked-list-is-palindrome.js"
      ]
    },
    {
      "id": 21,
      "title": "Reverse Linked List",
      "tags": [
        "linear-time",
        "linked-list"
      ],
      "description": "Reverse a singly linked list.",
      "solutions": [
        "reverse-inked-list.js"
      ]
    },
    {
      "id": 22,
      "title": "Merge Two Sorted Linked Lists",
      "tags": [
        "linear-time",
        "linked-list",
        "constant-memory"
      ],
      "description": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.",
      "solutions": [
        "merge-two-sorted-linked-lists.js"
      ]
    },
    {
      "id": 23,
      "title": "Group By Odd And Even Linked List",
      "tags": [
        "linear-time",
        "linked-list",
        "two-pointers",
        "constant-memory"
      ],
      "description": "Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes. The program should run in O(1) space complexity and O(n) time complexity.",
      "solutions": [
        "odd-and-even-linked-list.js"
      ]
    },
    {
      "id": 24,
      "title": "Rotate Linked List Right",
      "tags": [
        "linear-time",
        "linked-list",
        "constant-memory"
      ],
      "description": "Given a list, rotate the list to the right by k places, where k is non-negative.",
      "solutions": [
        "rotate-right-linked-list.js"
      ]
    },
    {
      "id": 25,
      "title": "Delete Given Linked List Node (One param)",
      "tags": [
        "constant-time",
        "linked-list",
        "constant-memory"
      ],
      "description": "Write a function to delete a node (except the tail) in a singly linked list, given only access to that node. Supposed the linked list is <mark>1 -> 2 -> 3 -> 4</mark> and you are given the third node with value 3, the linked list should become <mark>1 -> 2 -> 4</mark> after calling your function.",
      "solutions": [
        "remove-given-linked-list-node.js"
      ]
    },
    {
      "id": 26,
      "title": "Remove Duplicates from Sorted LinkedList",
      "tags": [
        "linear-time",
        "linked-list",
        "constant-memory"
      ],
      "description": "Given a sorted linked list, delete all duplicates such that each element appear only once.",
      "solutions": [
        "remove-duplicates-from-sorted-linked-list.js"
      ]
    },
    {
      "id": 27,
      "title": "LinkedList: Swap Nodes in Pairs",
      "tags": [
        "linear-time",
        "linked-list",
        "constant-memory"
      ],
      "description": "Given a linked list, swap every two adjacent nodes and return its head. For example, Given <mark>1->2->3->4</mark>, you should return the list as <mark>2->1->4->3</mark>. Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.",
      "solutions": [
        "linked-list-swap-nodes-in-pairs.js"
      ]
    },
    {
      "id": 28,
      "title": "Partition Linked List",
      "tags": [
        "linear-time",
        "linked-list",
        "constant-memory"
      ],
      "description": "Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions. For example, Given 1->4->3->2->5->2 and x = 3, return 1->2->2->4->3->5.",
      "solutions": [
        "partition-linked-list.js"
      ]
    },
    {
      "id": 29,
      "title": "Copy List with Random Pointer",
      "tags": [
        "linear-time",
        "linked-list"
      ],
      "description": "A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list.",
      "solutions": [
        "copy-list-with-random-pointer.js"
      ]
    },
    {
      "id": 30,
      "title": "Find Intersection of Two Linked Lists",
      "tags": [
        "linked-list",
        "linear-time",
        "constant-memory"
      ],
      "description": "Write a program to find the node at which the intersection of two singly linked lists begins. If the two linked lists have no intersection at all, return null. The linked lists must retain their original structure after the function returns. You may assume there are no cycles anywhere in the entire linked structure. Your code should preferably run in O(n) time",
      "solutions": [
        "find-intersection-of-two-linked-lists.js"
      ]
    },
    {
      "id": 31,
      "title": "Minimum Intersection Index Sum of Arrays",
      "tags": [
        "arrays",
        "linear-time"
      ],
      "description": "Given two arrays of strings. Print intersection elements between arrays with the minimal intersection indexes sum. For example, for array <mark>['a', 'b', 'c', 'l', 'd', 'z']</mark> and <mark>['d', 'm', 'c', 'b', 'j', 'z']</mark> answer wil be <mark>['d','c','b']</mark>, because minimum intersection indexes sum in array is 4",
      "solutions": [
        "minimum-intersection-index-sum-of-arrays.js"
      ]
    },
    {
      "id": 32,
      "title": "Count Subarrays Which Sum Equals K",
      "tags": [
        "arrays",
        "linear-time"
      ],
      "description": "Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. For example, if input <mark>nums = [1,1,1], k = 2</mark> then output must be 2",
      "solutions": [
        "count-subarrays-with-sum-equals-k.js"
      ]
    },
    {
      "id": 33,
      "title": "Find Longest Increasing Subarray Length",
      "tags": [
        "arrays",
        "linear-time",
        "constant-memory"
      ],
      "description": "Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).",
      "solutions": [
        "find-longest-increasing-subarray-len.js"
      ]
    },
    {
      "id": 34,
      "title": "Lowest Common Ancestor of a Binary Tree",
      "tags": [
        "tree",
        "recursive"
      ],
      "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. It is allowed for a node to be a descendant of itself",
      "solutions": [
        "find-lca-for-nodes.js"
      ]
    },
    {
      "id": 35,
      "title": "Calculate Amount Of Trapped Rain Water",
      "tags": [
        "arrays",
        "linear-time"
      ],
      "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.",
      "solutions": [
        "calculate-trapping-rain-water.js"
      ]
    },
    {
      "id": 36,
      "title": "Jump Game",
      "tags": [
        "arrays",
        "linear-time",
        "constant-memory"
      ],
      "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.",
      "solutions": [
        "jump-game.js"
      ]
    },
    {
      "id": 37,
      "title": "Best Time to Buy and Sell Stock",
      "tags": [
        "arrays",
        "linear-time",
        "constant-memory"
      ],
      "description": "Say you have an array for which the ith element is the price of a given stock on day i. If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.",
      "solutions": [
        "best-time-to-buy-and-sell-stock.js"
      ]
    },
    {
      "id": 38,
      "title": "Hamming Distance",
      "tags": [
        "bit-manipulation",
        "constant-time",
        "constant-memory"
      ],
      "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, calculate the Hamming distance.",
      "solutions": [
        "two-digits-hamming-distance.js"
      ]
    },
    {
      "id": 39,
      "title": "Course Schedule II",
      "tags": [
        "graph"
      ],
      "description": "There are a total of n courses you have to take, labeled from 0 to n - 1. Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1] Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses. There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.",
      "solutions": [
        "course-schedule-2.js"
      ]
    }
  ]
}
